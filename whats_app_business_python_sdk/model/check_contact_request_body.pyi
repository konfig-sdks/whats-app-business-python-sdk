# coding: utf-8

"""
    WhatsApp Business API

    See https://developers.facebook.com/docs/whatsapp

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from whats_app_business_python_sdk import schemas  # noqa: F401


class CheckContactRequestBody(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "contacts",
        }
        
        class properties:
        
            @staticmethod
            def contacts() -> typing.Type['CheckContactRequestBodyContacts']:
                return CheckContactRequestBodyContacts
            
            
            class blocking(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def NO_WAIT(cls):
                    return cls("no_wait")
                
                @schemas.classproperty
                def WAIT(cls):
                    return cls("wait")
            __annotations__ = {
                "contacts": contacts,
                "blocking": blocking,
            }
    
    contacts: 'CheckContactRequestBodyContacts'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contacts"]) -> 'CheckContactRequestBodyContacts': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["blocking"]) -> MetaOapg.properties.blocking: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["contacts", "blocking", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contacts"]) -> 'CheckContactRequestBodyContacts': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["blocking"]) -> typing.Union[MetaOapg.properties.blocking, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["contacts", "blocking", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        contacts: 'CheckContactRequestBodyContacts',
        blocking: typing.Union[MetaOapg.properties.blocking, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CheckContactRequestBody':
        return super().__new__(
            cls,
            *args,
            contacts=contacts,
            blocking=blocking,
            _configuration=_configuration,
            **kwargs,
        )

from whats_app_business_python_sdk.model.check_contact_request_body_contacts import CheckContactRequestBodyContacts
