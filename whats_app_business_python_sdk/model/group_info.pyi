# coding: utf-8

"""
    WhatsApp Business API

    See https://developers.facebook.com/docs/whatsapp

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from whats_app_business_python_sdk import schemas  # noqa: F401


class GroupInfo(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def admins() -> typing.Type['GroupInfoAdmins']:
                return GroupInfoAdmins
            creation_time = schemas.Int32Schema
            creator = schemas.StrSchema
        
            @staticmethod
            def participants() -> typing.Type['GroupInfoParticipants']:
                return GroupInfoParticipants
            subject = schemas.StrSchema
            __annotations__ = {
                "admins": admins,
                "creation_time": creation_time,
                "creator": creator,
                "participants": participants,
                "subject": subject,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["admins"]) -> 'GroupInfoAdmins': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creation_time"]) -> MetaOapg.properties.creation_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creator"]) -> MetaOapg.properties.creator: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["participants"]) -> 'GroupInfoParticipants': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subject"]) -> MetaOapg.properties.subject: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["admins", "creation_time", "creator", "participants", "subject", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["admins"]) -> typing.Union['GroupInfoAdmins', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creation_time"]) -> typing.Union[MetaOapg.properties.creation_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creator"]) -> typing.Union[MetaOapg.properties.creator, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["participants"]) -> typing.Union['GroupInfoParticipants', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subject"]) -> typing.Union[MetaOapg.properties.subject, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["admins", "creation_time", "creator", "participants", "subject", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        admins: typing.Union['GroupInfoAdmins', schemas.Unset] = schemas.unset,
        creation_time: typing.Union[MetaOapg.properties.creation_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        creator: typing.Union[MetaOapg.properties.creator, str, schemas.Unset] = schemas.unset,
        participants: typing.Union['GroupInfoParticipants', schemas.Unset] = schemas.unset,
        subject: typing.Union[MetaOapg.properties.subject, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GroupInfo':
        return super().__new__(
            cls,
            *args,
            admins=admins,
            creation_time=creation_time,
            creator=creator,
            participants=participants,
            subject=subject,
            _configuration=_configuration,
            **kwargs,
        )

from whats_app_business_python_sdk.model.group_info_admins import GroupInfoAdmins
from whats_app_business_python_sdk.model.group_info_participants import GroupInfoParticipants
