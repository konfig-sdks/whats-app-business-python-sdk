# coding: utf-8

"""
    WhatsApp Business API

    See https://developers.facebook.com/docs/whatsapp

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from whats_app_business_python_sdk import schemas  # noqa: F401


class SendMessageRequestBody(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "to",
        }
        
        class properties:
            to = schemas.StrSchema
        
            @staticmethod
            def audio() -> typing.Type['Audio']:
                return Audio
            
            
            class contacts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Contact']:
                        return Contact
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Contact'], typing.List['Contact']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'contacts':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Contact':
                    return super().__getitem__(i)
        
            @staticmethod
            def document() -> typing.Type['Document']:
                return Document
        
            @staticmethod
            def hsm() -> typing.Type['Hsm']:
                return Hsm
        
            @staticmethod
            def image() -> typing.Type['Image']:
                return Image
        
            @staticmethod
            def location() -> typing.Type['Location']:
                return Location
            preview_url = schemas.BoolSchema
            
            
            class recipient_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def INDIVIDUAL(cls):
                    return cls("individual")
                
                @schemas.classproperty
                def GROUP(cls):
                    return cls("group")
        
            @staticmethod
            def text() -> typing.Type['Text']:
                return Text
            ttl = schemas.DictSchema
        
            @staticmethod
            def type() -> typing.Type['MessageType']:
                return MessageType
        
            @staticmethod
            def video() -> typing.Type['Video']:
                return Video
            __annotations__ = {
                "to": to,
                "audio": audio,
                "contacts": contacts,
                "document": document,
                "hsm": hsm,
                "image": image,
                "location": location,
                "preview_url": preview_url,
                "recipient_type": recipient_type,
                "text": text,
                "ttl": ttl,
                "type": type,
                "video": video,
            }
    
    to: MetaOapg.properties.to
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["to"]) -> MetaOapg.properties.to: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["audio"]) -> 'Audio': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contacts"]) -> MetaOapg.properties.contacts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["document"]) -> 'Document': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hsm"]) -> 'Hsm': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image"]) -> 'Image': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location"]) -> 'Location': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preview_url"]) -> MetaOapg.properties.preview_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recipient_type"]) -> MetaOapg.properties.recipient_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["text"]) -> 'Text': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ttl"]) -> MetaOapg.properties.ttl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'MessageType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["video"]) -> 'Video': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["to", "audio", "contacts", "document", "hsm", "image", "location", "preview_url", "recipient_type", "text", "ttl", "type", "video", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["to"]) -> MetaOapg.properties.to: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["audio"]) -> typing.Union['Audio', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contacts"]) -> typing.Union[MetaOapg.properties.contacts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["document"]) -> typing.Union['Document', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hsm"]) -> typing.Union['Hsm', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image"]) -> typing.Union['Image', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location"]) -> typing.Union['Location', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preview_url"]) -> typing.Union[MetaOapg.properties.preview_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recipient_type"]) -> typing.Union[MetaOapg.properties.recipient_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["text"]) -> typing.Union['Text', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ttl"]) -> typing.Union[MetaOapg.properties.ttl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union['MessageType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["video"]) -> typing.Union['Video', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["to", "audio", "contacts", "document", "hsm", "image", "location", "preview_url", "recipient_type", "text", "ttl", "type", "video", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        to: typing.Union[MetaOapg.properties.to, str, ],
        audio: typing.Union['Audio', schemas.Unset] = schemas.unset,
        contacts: typing.Union[MetaOapg.properties.contacts, list, tuple, schemas.Unset] = schemas.unset,
        document: typing.Union['Document', schemas.Unset] = schemas.unset,
        hsm: typing.Union['Hsm', schemas.Unset] = schemas.unset,
        image: typing.Union['Image', schemas.Unset] = schemas.unset,
        location: typing.Union['Location', schemas.Unset] = schemas.unset,
        preview_url: typing.Union[MetaOapg.properties.preview_url, bool, schemas.Unset] = schemas.unset,
        recipient_type: typing.Union[MetaOapg.properties.recipient_type, str, schemas.Unset] = schemas.unset,
        text: typing.Union['Text', schemas.Unset] = schemas.unset,
        ttl: typing.Union[MetaOapg.properties.ttl, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        type: typing.Union['MessageType', schemas.Unset] = schemas.unset,
        video: typing.Union['Video', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SendMessageRequestBody':
        return super().__new__(
            cls,
            *args,
            to=to,
            audio=audio,
            contacts=contacts,
            document=document,
            hsm=hsm,
            image=image,
            location=location,
            preview_url=preview_url,
            recipient_type=recipient_type,
            text=text,
            ttl=ttl,
            type=type,
            video=video,
            _configuration=_configuration,
            **kwargs,
        )

from whats_app_business_python_sdk.model.audio import Audio
from whats_app_business_python_sdk.model.contact import Contact
from whats_app_business_python_sdk.model.document import Document
from whats_app_business_python_sdk.model.hsm import Hsm
from whats_app_business_python_sdk.model.image import Image
from whats_app_business_python_sdk.model.location import Location
from whats_app_business_python_sdk.model.message_type import MessageType
from whats_app_business_python_sdk.model.text import Text
from whats_app_business_python_sdk.model.video import Video
