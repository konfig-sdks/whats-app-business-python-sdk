# coding: utf-8

"""
    WhatsApp Business API

    See https://developers.facebook.com/docs/whatsapp

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from whats_app_business_python_sdk import schemas  # noqa: F401


class SetShardsRequestBody(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "cc",
            "shards",
            "pin",
            "phone_number",
        }
        
        class properties:
            cc = schemas.StrSchema
            phone_number = schemas.StrSchema
            pin = schemas.StrSchema
            
            
            class shards(
                schemas.EnumBase,
                schemas.Int32Schema
            ):
                
                @schemas.classproperty
                def POSITIVE_1(cls):
                    return cls(1)
                
                @schemas.classproperty
                def POSITIVE_2(cls):
                    return cls(2)
                
                @schemas.classproperty
                def POSITIVE_4(cls):
                    return cls(4)
                
                @schemas.classproperty
                def POSITIVE_8(cls):
                    return cls(8)
                
                @schemas.classproperty
                def POSITIVE_16(cls):
                    return cls(16)
                
                @schemas.classproperty
                def POSITIVE_32(cls):
                    return cls(32)
            __annotations__ = {
                "cc": cc,
                "phone_number": phone_number,
                "pin": pin,
                "shards": shards,
            }
    
    cc: MetaOapg.properties.cc
    shards: MetaOapg.properties.shards
    pin: MetaOapg.properties.pin
    phone_number: MetaOapg.properties.phone_number
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cc"]) -> MetaOapg.properties.cc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phone_number"]) -> MetaOapg.properties.phone_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pin"]) -> MetaOapg.properties.pin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shards"]) -> MetaOapg.properties.shards: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["cc", "phone_number", "pin", "shards", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cc"]) -> MetaOapg.properties.cc: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phone_number"]) -> MetaOapg.properties.phone_number: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pin"]) -> MetaOapg.properties.pin: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shards"]) -> MetaOapg.properties.shards: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cc", "phone_number", "pin", "shards", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        cc: typing.Union[MetaOapg.properties.cc, str, ],
        shards: typing.Union[MetaOapg.properties.shards, decimal.Decimal, int, ],
        pin: typing.Union[MetaOapg.properties.pin, str, ],
        phone_number: typing.Union[MetaOapg.properties.phone_number, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SetShardsRequestBody':
        return super().__new__(
            cls,
            *args,
            cc=cc,
            shards=shards,
            pin=pin,
            phone_number=phone_number,
            _configuration=_configuration,
            **kwargs,
        )
