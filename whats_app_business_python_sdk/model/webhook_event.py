# coding: utf-8

"""
    WhatsApp Business API

    See https://developers.facebook.com/docs/whatsapp

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from whats_app_business_python_sdk import schemas  # noqa: F401


class WebhookEvent(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class contacts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['WebhookContact']:
                        return WebhookContact
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['WebhookContact'], typing.List['WebhookContact']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'contacts':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'WebhookContact':
                    return super().__getitem__(i)
            
            
            class errors(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Error']:
                        return Error
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Error'], typing.List['Error']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'errors':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Error':
                    return super().__getitem__(i)
            
            
            class messages(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['WebhookMessage']:
                        return WebhookMessage
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['WebhookMessage'], typing.List['WebhookMessage']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'messages':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'WebhookMessage':
                    return super().__getitem__(i)
            
            
            class statuses(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['WebhookStatus']:
                        return WebhookStatus
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['WebhookStatus'], typing.List['WebhookStatus']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'statuses':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'WebhookStatus':
                    return super().__getitem__(i)
            __annotations__ = {
                "contacts": contacts,
                "errors": errors,
                "messages": messages,
                "statuses": statuses,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contacts"]) -> MetaOapg.properties.contacts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["errors"]) -> MetaOapg.properties.errors: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["messages"]) -> MetaOapg.properties.messages: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statuses"]) -> MetaOapg.properties.statuses: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["contacts", "errors", "messages", "statuses", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contacts"]) -> typing.Union[MetaOapg.properties.contacts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["errors"]) -> typing.Union[MetaOapg.properties.errors, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["messages"]) -> typing.Union[MetaOapg.properties.messages, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statuses"]) -> typing.Union[MetaOapg.properties.statuses, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["contacts", "errors", "messages", "statuses", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        contacts: typing.Union[MetaOapg.properties.contacts, list, tuple, schemas.Unset] = schemas.unset,
        errors: typing.Union[MetaOapg.properties.errors, list, tuple, schemas.Unset] = schemas.unset,
        messages: typing.Union[MetaOapg.properties.messages, list, tuple, schemas.Unset] = schemas.unset,
        statuses: typing.Union[MetaOapg.properties.statuses, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WebhookEvent':
        return super().__new__(
            cls,
            *args,
            contacts=contacts,
            errors=errors,
            messages=messages,
            statuses=statuses,
            _configuration=_configuration,
            **kwargs,
        )

from whats_app_business_python_sdk.model.error import Error
from whats_app_business_python_sdk.model.webhook_contact import WebhookContact
from whats_app_business_python_sdk.model.webhook_message import WebhookMessage
from whats_app_business_python_sdk.model.webhook_status import WebhookStatus
