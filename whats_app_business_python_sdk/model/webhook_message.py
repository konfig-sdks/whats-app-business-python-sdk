# coding: utf-8

"""
    WhatsApp Business API

    See https://developers.facebook.com/docs/whatsapp

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from whats_app_business_python_sdk import schemas  # noqa: F401


class WebhookMessage(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def audio() -> typing.Type['WebhookAudio']:
                return WebhookAudio
            
            
            class contacts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Contact']:
                        return Contact
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Contact'], typing.List['Contact']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'contacts':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Contact':
                    return super().__getitem__(i)
        
            @staticmethod
            def context() -> typing.Type['MessageContext']:
                return MessageContext
        
            @staticmethod
            def document() -> typing.Type['WebhookDocument']:
                return WebhookDocument
            
            
            class errors(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Error']:
                        return Error
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Error'], typing.List['Error']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'errors':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Error':
                    return super().__getitem__(i)
            _from = schemas.StrSchema
            group_id = schemas.StrSchema
            id = schemas.StrSchema
        
            @staticmethod
            def image() -> typing.Type['WebhookImage']:
                return WebhookImage
        
            @staticmethod
            def location() -> typing.Type['WebhookLocation']:
                return WebhookLocation
        
            @staticmethod
            def system() -> typing.Type['WebhookSystem']:
                return WebhookSystem
        
            @staticmethod
            def text() -> typing.Type['WebhookText']:
                return WebhookText
            timestamp = schemas.StrSchema
        
            @staticmethod
            def type() -> typing.Type['MessageType']:
                return MessageType
        
            @staticmethod
            def video() -> typing.Type['WebhookVideo']:
                return WebhookVideo
        
            @staticmethod
            def voice() -> typing.Type['WebhookVoice']:
                return WebhookVoice
            __annotations__ = {
                "audio": audio,
                "contacts": contacts,
                "context": context,
                "document": document,
                "errors": errors,
                "from": _from,
                "group_id": group_id,
                "id": id,
                "image": image,
                "location": location,
                "system": system,
                "text": text,
                "timestamp": timestamp,
                "type": type,
                "video": video,
                "voice": voice,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["audio"]) -> 'WebhookAudio': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contacts"]) -> MetaOapg.properties.contacts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["context"]) -> 'MessageContext': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["document"]) -> 'WebhookDocument': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["errors"]) -> MetaOapg.properties.errors: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["from"]) -> MetaOapg.properties._from: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["group_id"]) -> MetaOapg.properties.group_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image"]) -> 'WebhookImage': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location"]) -> 'WebhookLocation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["system"]) -> 'WebhookSystem': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["text"]) -> 'WebhookText': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'MessageType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["video"]) -> 'WebhookVideo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["voice"]) -> 'WebhookVoice': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["audio", "contacts", "context", "document", "errors", "from", "group_id", "id", "image", "location", "system", "text", "timestamp", "type", "video", "voice", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["audio"]) -> typing.Union['WebhookAudio', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contacts"]) -> typing.Union[MetaOapg.properties.contacts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["context"]) -> typing.Union['MessageContext', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["document"]) -> typing.Union['WebhookDocument', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["errors"]) -> typing.Union[MetaOapg.properties.errors, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["from"]) -> typing.Union[MetaOapg.properties._from, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["group_id"]) -> typing.Union[MetaOapg.properties.group_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image"]) -> typing.Union['WebhookImage', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location"]) -> typing.Union['WebhookLocation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["system"]) -> typing.Union['WebhookSystem', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["text"]) -> typing.Union['WebhookText', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timestamp"]) -> typing.Union[MetaOapg.properties.timestamp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union['MessageType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["video"]) -> typing.Union['WebhookVideo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["voice"]) -> typing.Union['WebhookVoice', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["audio", "contacts", "context", "document", "errors", "from", "group_id", "id", "image", "location", "system", "text", "timestamp", "type", "video", "voice", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        audio: typing.Union['WebhookAudio', schemas.Unset] = schemas.unset,
        contacts: typing.Union[MetaOapg.properties.contacts, list, tuple, schemas.Unset] = schemas.unset,
        context: typing.Union['MessageContext', schemas.Unset] = schemas.unset,
        document: typing.Union['WebhookDocument', schemas.Unset] = schemas.unset,
        errors: typing.Union[MetaOapg.properties.errors, list, tuple, schemas.Unset] = schemas.unset,
        group_id: typing.Union[MetaOapg.properties.group_id, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        image: typing.Union['WebhookImage', schemas.Unset] = schemas.unset,
        location: typing.Union['WebhookLocation', schemas.Unset] = schemas.unset,
        system: typing.Union['WebhookSystem', schemas.Unset] = schemas.unset,
        text: typing.Union['WebhookText', schemas.Unset] = schemas.unset,
        timestamp: typing.Union[MetaOapg.properties.timestamp, str, schemas.Unset] = schemas.unset,
        type: typing.Union['MessageType', schemas.Unset] = schemas.unset,
        video: typing.Union['WebhookVideo', schemas.Unset] = schemas.unset,
        voice: typing.Union['WebhookVoice', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WebhookMessage':
        return super().__new__(
            cls,
            *args,
            audio=audio,
            contacts=contacts,
            context=context,
            document=document,
            errors=errors,
            group_id=group_id,
            id=id,
            image=image,
            location=location,
            system=system,
            text=text,
            timestamp=timestamp,
            type=type,
            video=video,
            voice=voice,
            _configuration=_configuration,
            **kwargs,
        )

from whats_app_business_python_sdk.model.contact import Contact
from whats_app_business_python_sdk.model.error import Error
from whats_app_business_python_sdk.model.message_context import MessageContext
from whats_app_business_python_sdk.model.message_type import MessageType
from whats_app_business_python_sdk.model.webhook_audio import WebhookAudio
from whats_app_business_python_sdk.model.webhook_document import WebhookDocument
from whats_app_business_python_sdk.model.webhook_image import WebhookImage
from whats_app_business_python_sdk.model.webhook_location import WebhookLocation
from whats_app_business_python_sdk.model.webhook_system import WebhookSystem
from whats_app_business_python_sdk.model.webhook_text import WebhookText
from whats_app_business_python_sdk.model.webhook_video import WebhookVideo
from whats_app_business_python_sdk.model.webhook_voice import WebhookVoice
