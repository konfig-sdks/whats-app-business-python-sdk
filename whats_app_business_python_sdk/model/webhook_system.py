# coding: utf-8

"""
    WhatsApp Business API

    See https://developers.facebook.com/docs/whatsapp

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from whats_app_business_python_sdk import schemas  # noqa: F401


class WebhookSystem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            body = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "group_created": "GROUP_CREATED",
                        "group_user_promoted": "GROUP_USER_PROMOTED",
                        "group_user_demoted": "GROUP_USER_DEMOTED",
                        "group_user_joined": "GROUP_USER_JOINED",
                        "group_user_left": "GROUP_USER_LEFT",
                        "group_subject_changed": "GROUP_SUBJECT_CHANGED",
                        "group_description_changed": "GROUP_DESCRIPTION_CHANGED",
                        "group_icon_changed": "GROUP_ICON_CHANGED",
                        "group_icon_deleted": "GROUP_ICON_DELETED",
                        "group_invite_link_revoked": "GROUP_INVITE_LINK_REVOKED",
                        "user_identity_changed": "USER_IDENTITY_CHANGED",
                        "group_user_changed_number": "GROUP_USER_CHANGED_NUMBER",
                        "group_error_fetching_photo": "GROUP_ERROR_FETCHING_PHOTO",
                        "group_error_adding_users": "GROUP_ERROR_ADDING_USERS",
                        "group_error_adding_user": "GROUP_ERROR_ADDING_USER",
                        "group_error_full_adding_users": "GROUP_ERROR_FULL_ADDING_USERS",
                        "group_error_removing_user": "GROUP_ERROR_REMOVING_USER",
                        "broadcast_list_created": "BROADCAST_LIST_CREATED",
                        "group_ended": "GROUP_ENDED",
                        "group_error_blocked_adding_user": "GROUP_ERROR_BLOCKED_ADDING_USER",
                    }
                
                @schemas.classproperty
                def GROUP_CREATED(cls):
                    return cls("group_created")
                
                @schemas.classproperty
                def GROUP_USER_PROMOTED(cls):
                    return cls("group_user_promoted")
                
                @schemas.classproperty
                def GROUP_USER_DEMOTED(cls):
                    return cls("group_user_demoted")
                
                @schemas.classproperty
                def GROUP_USER_JOINED(cls):
                    return cls("group_user_joined")
                
                @schemas.classproperty
                def GROUP_USER_LEFT(cls):
                    return cls("group_user_left")
                
                @schemas.classproperty
                def GROUP_SUBJECT_CHANGED(cls):
                    return cls("group_subject_changed")
                
                @schemas.classproperty
                def GROUP_DESCRIPTION_CHANGED(cls):
                    return cls("group_description_changed")
                
                @schemas.classproperty
                def GROUP_ICON_CHANGED(cls):
                    return cls("group_icon_changed")
                
                @schemas.classproperty
                def GROUP_ICON_DELETED(cls):
                    return cls("group_icon_deleted")
                
                @schemas.classproperty
                def GROUP_INVITE_LINK_REVOKED(cls):
                    return cls("group_invite_link_revoked")
                
                @schemas.classproperty
                def USER_IDENTITY_CHANGED(cls):
                    return cls("user_identity_changed")
                
                @schemas.classproperty
                def GROUP_USER_CHANGED_NUMBER(cls):
                    return cls("group_user_changed_number")
                
                @schemas.classproperty
                def GROUP_ERROR_FETCHING_PHOTO(cls):
                    return cls("group_error_fetching_photo")
                
                @schemas.classproperty
                def GROUP_ERROR_ADDING_USERS(cls):
                    return cls("group_error_adding_users")
                
                @schemas.classproperty
                def GROUP_ERROR_ADDING_USER(cls):
                    return cls("group_error_adding_user")
                
                @schemas.classproperty
                def GROUP_ERROR_FULL_ADDING_USERS(cls):
                    return cls("group_error_full_adding_users")
                
                @schemas.classproperty
                def GROUP_ERROR_REMOVING_USER(cls):
                    return cls("group_error_removing_user")
                
                @schemas.classproperty
                def BROADCAST_LIST_CREATED(cls):
                    return cls("broadcast_list_created")
                
                @schemas.classproperty
                def GROUP_ENDED(cls):
                    return cls("group_ended")
                
                @schemas.classproperty
                def GROUP_ERROR_BLOCKED_ADDING_USER(cls):
                    return cls("group_error_blocked_adding_user")
            __annotations__ = {
                "body": body,
                "type": type,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["body"]) -> MetaOapg.properties.body: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["body", "type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["body"]) -> typing.Union[MetaOapg.properties.body, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["body", "type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        body: typing.Union[MetaOapg.properties.body, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WebhookSystem':
        return super().__new__(
            cls,
            *args,
            body=body,
            type=type,
            _configuration=_configuration,
            **kwargs,
        )
